ThreadNum: 566458
Subject: Re: farmula for  bearing
To: kalpana_deo@yahoo.com (kalpana)
From: Doctor Rick
TimeStamp: 08/27/2004 at 13:33:02
Sent: yes

Hi, Kalpana.

I have been making a lot of errors in this algorithm! Let's try 
again. One 

conceptual problem I have is that atan(y/x) gives the angle 
counterclockwise from 

the x axis, but we want the angle clockwise from the y axis. Another 
source of confusion is the fact that the arguments of atan2() are 
different in, for instance, Excel (where I am testing the algorithm) 
and C: Excel uses atan2(x,y) while C uses atan2(y,x). Here is another 
try at correcting the algorithm:

  dlat = lat2 - lat1
  dlon = lon2 - lon1
  y = sin(lon2-lon1)*cos(lat2)
  x = cos(lat1)*sin(lat2)-sin(lat1)*cos(lat2)*cos(lon2-lon1)
  if y > 0 then
    if x > 0 then tc1 = arctan(y/x)
    if x < 0 then tc1 = 180 - arctan(-y/x)
    if x = 0 then tc1 = 90
  if y < 0 then
    if x > 0 then tc1 = -arctan(-y/x)
    if x < 0 then tc1 = arctan(y/x)-180
    if x = 0 then tc1 = 270
  if y = 0 then
    if x > 0 then tc1 = 0
    if x < 0 then tc1 = 180
    if x = 0 then [the 2 points are the same]

Try this. The if clauses are equivalent to atan2(y,x). I really, 
really hope I've got it right this time!

- Doctor Rick, The Math Forum
  <http://mathforum.org/dr.math/>

As kalpana wrote to Dr. Math
On 08/26/2004 at 04:56:00 (Eastern Time),
>Hello Dr.Rick
>
>I just to tell you thay the standard equations for x and y are
>
>y = sin(lon2-lon1)*cos(lat2)
>x = cos(lat1)*sin(lat2)*-sin(lat1)*cos(lat2)*cos(lon1-lon2)
>If my points are
>point A : lat1- 17 deg 26 min N, lon1- 78 deg 27min E
>point B : LAT2 - 16 DEG 19MIN N , LON2 80 DEG 26 MIN E
>SO Y = 0.03320, 
>X = - 0.01933
>Now what you gave in the last emails is :
>y = -0.01933
>x= 0.03320
>That means do we have interchange the equation for x and y?
>with the above two points I ran the following program
>#include <stdio.h>
>#include <math.h>
>#include <float.h>
>#include <conio.h>
>
>main(void)
> {
>   double result, tc1, lon1, lon2, lat1, lat2, dlat, dlon;
>   double x, y, pi = 3.141596;
>
>/*   lat1 = ((17.0 + (26.0/60.0))*pi)/180.0;
>   lon1 = ((78.0 + (27.0/60.0))*pi)/180.0;
>   lat2 = ((16.0 + (19.0/60.0))*pi)/180.0;
>   lon2 = ((80.0 + (26.0/60.0))*pi)/180.0;
>
>   lat1 = ((22.0 + (36.0/60.0))*pi)/180.0;
>   lon1 = ((88.0 + (19.0/60.0))*pi)/180.0;
>   lat2 = ((28.0 + (39.0/60.0))*pi)/180.0;
>   lon2 = ((77.0 + (13.0/60.0))*pi)/180.0; */
>
>   lat1 = ((26.0 + (55.0/60.0))*pi)/180.0;
>   lon1 = ((75.0 + (49.0/60.0))*pi)/180.0;
>   lat2 = ((31.0 + (38.0/60.0))*pi)/180.0;
>   lon2 = ((74.0 + (53.0/60.0))*pi)/180.0;
>
>   dlat = lat2 - lat1;
>   dlon = lon2 - lon1;
>
>   x = sin(lon2-lon1) * cos(lat2);
>   y = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(lon2-
lon1);
>
>   if(y > 0.0)
>   {
>     if(x > 0.0)
>       tc1 =  90.0 -(atan(x/y)*180.0/pi);
>     if(x < 0.0)
>       tc1 =  270.0 + (atan(-y/x)*180.0/pi);
>     if(x == 0.0)
>       tc1 = 0.0;
>   }
>   if(y < 0.0)
>   {
>   if(x > 0.0)
>  tc1 =  90.0 + (atan(-y/x)*180.0/pi);
>   if(x < 0.0)
>  tc1 =  270 - (atan(x/y)*180.0/pi);
>   if(x == 0.0)
>  tc1 = 180.0;
>   }
>   if(y == 0.0)
>   {
> if(x > 0.0)
>     tc1 =  90.0;
> if(x < 0.0)
>     tc1 =  270.0;
> if(x == 0.0)
>     tc1 = 0.0;
>   }
>
>   printf("TC1 Value= %f\n", tc1);
>
>   getch();
>
>}
>
>This gives the answer as 120 degree, but if I try the same farmula 
>for other points like :
>case 1 point A : 22 deg 36 min N , 88 deg, 19 min E,
>Point B: 28 deg, 39 min N, 77 deg 13 min E
>By direct farmula I got the answer as - 56.528 but by the program I 
>got 303.4 which is wrong. I have tried with other points  also the 
>above algorithm is not statisfying.
>Thanks
>Kalpana

